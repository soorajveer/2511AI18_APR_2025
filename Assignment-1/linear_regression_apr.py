# -*- coding: utf-8 -*-
"""Linear Regression_APR.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1B4mXnu3HL2PcodWs0MVjYkM-nOGt6eOR
"""

# Predicting the Price of a House based on 3 input features

# Import libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score
from mpl_toolkits.mplot3d import Axes3D

# Create the dataset
np.random.seed(42)

size = np.random.randint(500, 4000, 50)           # House size in sqft
bedrooms = np.random.randint(1, 6, 50)            # Number of bedrooms
age = np.random.randint(1, 30, 50)                # Age of house in years

# Target (house price in lakhs)
price = (size * 0.05) + (bedrooms * 10) - (age * 1.5) + np.random.randint(0, 20, 50)

# Create DataFrame
df = pd.DataFrame({
    'Size (sqft)': size,
    'Bedrooms': bedrooms,
    'Age (years)': age,
    'Price (lakhs)': price
})

print("Sample of dataset:")
print(df.head())

# Split features and target
X = df[['Size (sqft)', 'Bedrooms', 'Age (years)']]
y = df['Price (lakhs)']

# Train-test split (80% training, 20% testing)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train Linear Regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Model coefficients
print("\nModel Coefficients:")
print(f"Size (sqft): {model.coef_[0]:.2f}")
print(f"Bedrooms: {model.coef_[1]:.2f}")
print(f"Age (years): {model.coef_[2]:.2f}")
print("Intercept:", model.intercept_)

# Predictions
y_pred = model.predict(X_test)

# Model evaluation
print("\nModel Evaluation:")
print("Mean Squared Error:", mean_squared_error(y_test, y_pred))
print("RÂ² Score:", r2_score(y_test, y_pred))

#3D Visualization (Size, Age vs Price)
X_2d = df[['Size (sqft)', 'Age (years)']]
y_2d = df['Price (lakhs)']

# Fit model with only 2 features
model_2d = LinearRegression()
model_2d.fit(X_2d, y_2d)

# Create a meshgrid for Size and Age
size_range = np.linspace(X_2d['Size (sqft)'].min(), X_2d['Size (sqft)'].max(), 20)
age_range = np.linspace(X_2d['Age (years)'].min(), X_2d['Age (years)'].max(), 20)
size_grid, age_grid = np.meshgrid(size_range, age_range)

# Flatten and predict
grid_points = np.c_[size_grid.ravel(), age_grid.ravel()]
price_pred = model_2d.predict(grid_points)
price_grid = price_pred.reshape(size_grid.shape)

# Plot 3D scatter + regression plane
fig = plt.figure(figsize=(10, 7))
ax = fig.add_subplot(111, projection='3d')

# Scatter actual points
ax.scatter(X_2d['Size (sqft)'], X_2d['Age (years)'], y_2d, color='blue', label='Actual Data')

# Plot regression plane
ax.plot_surface(size_grid, age_grid, price_grid, color='red', alpha=0.5)

# Labels
ax.set_xlabel("Size (sqft)")
ax.set_ylabel("Age (years)")
ax.set_zlabel("Price (lakhs)")
ax.set_title("3D Regression Plane: Size & Age vs Price")
plt.legend()
plt.show()


# Visualization (only Size vs Price)
plt.scatter(X_test['Size (sqft)'], y_test, color='blue', label='Actual Prices')
plt.scatter(X_test['Size (sqft)'], y_pred, color='red', label='Predicted Prices')
plt.xlabel("House Size (sqft)")
plt.ylabel("Price (lakhs)")
plt.title("House Size - Actual vs Predicted Prices")
plt.legend()
plt.show()

# Visualization (only Bedrooms vs Price)
plt.scatter(X_test['Bedrooms'], y_test, color='blue', label='Actual Prices')
plt.scatter(X_test['Bedrooms'], y_pred, color='red', label='Predicted Prices')
plt.xlabel("Bedrooms")
plt.ylabel("Price (lakhs)")
plt.title("Bedrooms - Actual vs Predicted Prices")
plt.legend()
plt.show()

# Visualization (only Bedrooms vs Price)
plt.scatter(X_test['Age (years)'], y_test, color='blue', label='Actual Prices')
plt.scatter(X_test['Age (years)'], y_pred, color='red', label='Predicted Prices')
plt.xlabel("Age (years)")
plt.ylabel("Price (lakhs)")
plt.title("Age (years) - Actual vs Predicted Prices")
plt.legend()
plt.show()

# Predict for a new house
new_house = np.array([[2500, 4, 10]])  # [Size, Bedrooms, Age]
predicted_price = model.predict(new_house)
print(f"\nPredicted price for house {new_house.tolist()} = {predicted_price[0]:.2f} lakhs")